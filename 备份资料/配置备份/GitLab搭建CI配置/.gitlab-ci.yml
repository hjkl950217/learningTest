#关键字文档：https://docs.gitlab.com/ee/ci/yaml/README.html  （可能需要挂梯子）

#需要自己设置的变量：
#在项目>设置>ci/cd 展开变量部分

# Ut_Threshold          代码覆盖率阈值
# RobotUserName         推送镜像机器人的用户名,填写$后面的即可。例: robot$test,填写test     
# RobotPwd              推送镜像机器人的密码


#runner信息：
#编译机 devops机器       runner-tag为build   （编译机目前只有一个）
#部署机 v5开发环境       runner-tag为deploy   (开发机可以有多个,若添加多个，请修改deploy步骤下的tag)


#编译工具
# 新建的项目需要手动下载下面地址的所有文件到“.build”文件夹下面
# http://code.gmpsoft.net:8000/devops/gmp.cicdtool/tree/master/ToolRelease


# 如何一次部署多个服务
# 1.在对应主程序目录下准备DockerFile  
# 2.在variables下面增加 DockerFilePath变量  
# 3.复制下面的build_dockerImage步骤，然后修改变量

variables:
  DockerFilePath1: "./GMP.Web"  
  DockerFilePath2: "./GMP.HostedService" 
  ImageRepositoryUrl1: 192.168.1.100/develop/dms-web   
  ImageRepositoryUrl2: 192.168.1.100/develop/dms-hostedService

image: 192.168.1.100/devops/gmp_cicd:210311-6  #编译时使用的镜像

before_script: #公共脚本,每个job运行脚本前都会运行的脚本
  - echo "--"
 

#定义ci管道会有几个阶段
stages: 
  - build
  - test
  - build-image
  - deploy
  - deploy2

#job:编译,测试是否能编译通过
build_app:
  stage: build

  script:
    - echo "开始编译"
    - dotnet build
  tags:
    - build #tags用于选择runner

 
 #job:单元测试
 #job:单元测试
ut:
  stage: test
  script:
    - echo "开始单元测试"
    #用coverlet.msbuild执行单元测试，具体可以参考： 
    # https://github.com/coverlet-coverage/coverlet/blob/master/Documentation/MSBuildIntegration.md 
    # CollectCoverage true 					开启UT报告收集
    # CoverletOutputFormat=json				UT报告格式
    # CoverletOutput="xxx"					指定输出结果的位置
    # MergeWith="xxxx"						合并结果并输出到这个文件
    # threshold=80							代码覆盖率阈值
    # ThresholdType=line					测试方法 计算代码行
    # SkipAutoProps=true					跳过自动属性测试
    # Exclude="[Microsoft.*]*"	            排除系统程序集
    
    - |
        dotnet test \
        /p:CollectCoverage=true \
        /p:CoverletOutputFormat=json \
        /p:CoverletOutput="../CoverageResults/" \
        /p:MergeWith="../CoverageResults/coverage.json" \
        /p:threshold=$Ut_Threshold \
        /p:ThresholdType=line \
        /p:SkipAutoProps=true \
        /p:Exclude=\"[Microsoft.*]*,[DMS.Web.Tests]*\"
  coverage: '/\| Average \|\s*\d{0,3}.\d*%\s*\|/'
  tags:
    - build
    

#job:打包
build_dockerImage1:
  stage: build-image
  script:
    - echo "开始打包"
    - ls -al
    - pwd
    - cd ./.build
    - dotnet ./GMP.CICDTool.dll $ImageRepositoryUrl1 $DockerFilePath1/Dockerfile $(export)
    - cd ..
    - chmod +x ./.build/build.sh #赋予脚本权限
    #- uid=robot\$$RobotUserName
    - uid=$RobotUserName
    #- echo "username:$uid  pwd:$RobotPwd"
    - docker login $ImageRepositoryUrl1 -u $uid -p $RobotPwd  #登录镜像仓库
    - ls -al
    - pwd
    - ./.build/build.sh 
    
  tags:
    - build
 
#job:打包
build_dockerImage2:
  stage: build-image
  script:
    - echo "开始打包"
    - ls -al
    - pwd
    - export
    - echo ------------------------------------------------
    - cd ./.build
    - dotnet ./GMP.CICDTool.dll $ImageRepositoryUrl2 $DockerFilePath2/Dockerfile
    - cd ..
    - chmod +x ./.build/build.sh #赋予脚本权限
    #- uid=robot\$$RobotUserName
    - uid=$RobotUserName
    #- echo "username:$uid  pwd:$RobotPwd"
    - docker login $ImageRepositoryUrl2 -u $uid -p $RobotPwd  #登录镜像仓库
    - ls -al
    - pwd
    - ./.build/build.sh 
    
  tags:
    - build


#部署
deploy_app:
    stage: deploy
    script:
    - echo "开始部署" 
    - pwd
    - cd /opt
    - docker stack deploy -c docker-compose-citest.yml citest
    tags:
    - deploy

