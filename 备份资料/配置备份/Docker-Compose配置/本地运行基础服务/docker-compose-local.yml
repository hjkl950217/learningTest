version: '3.8'

services:
  localNginx: #服务名字
    image: "nginx:1.19.6"
    container_name: "localNginx"
    network_mode: "bridge"
    volumes: #卷配置 相当于配置硬盘
      - type: bind #安装类型 
        source: "./nginx.conf"
        target: "/etc/nginx/nginx.conf"
        read_only: true #将卷设置为只读
      - type: bind #安装类型 
        source: "D:/项目/公司项目/河长制/河长制系统2.0/HZZ2.0/GZHZZ/web/RiverChief.Web-GZZ/WebClient/dist"
        target: "/etc/nginx/html"
      - type: bind #安装类型 
        source: "./nginxlogs"
        target: "/var/log/nginx"
        
    environment: #设置容器内的环境变量 会覆盖镜像中的环境变量
      #- NGINX_HOST=foobar.com
      - NGINX_PORT=8055
    #depends_on: #表达服务之间的依赖性 配置后依赖docker提供的dns能力，可以访问如 rma-web:8080 rma-web:{动态端口} 一类的地址
      #- rma-web
    ports:
      - "8055:8055"
    command: [nginx-debug, '-g', 'daemon off;'] # 调试模式运行

      
  localMysql:
    image: "mysql:8.0.22"
    container_name: "mysql"
    network_mode: "bridge"
    command:
    # MySQL8的密码验证方式默认是 caching_sha2_password，但是很多的连接工具还不支持该方式
    # 就需要手动设置下mysql的密码认证方式为以前的 mysql_native_password 方式
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --innodb-use-native-aio=0
    # docker的重启策略：在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器
    #restart: unless-stopped
  
    environment:
      MYSQL_ROOT_PASSWORD: 123456 # root用户的密码
      #MYSQL_USER: testuser # 创建新用户
      #MYSQL_PASSWORD: 123456 # 新用户的密码
      # - TZ=Asia/Shanghai
    ports:
      - 3306:3306
    volumes:
      - type: bind #安装类型 
        source: "./mysqldata"
        target: "/var/lib/mysql"    
      - type: bind
        source: "./mysql.cnf"
        target: "/etc/mysql/my.cnf" 
  
  localRedis:
    image: "redis"
    container_name: "localRedis"
    network_mode: "bridge"
    #masterauth参数是副本集同步密码,如果部署哨兵模式，现在的master可能变成slave，所以也要带上密码
    command: redis-server --requirepass scwj.123 --save ""
    
    ports:
      - 6379:6379
      

      
        