        /// <summary>
        /// 扫描服务层类并转换为IOC代码
        /// </summary>
        /// <param name="type">要扫描项目中的任意一个类</param>
        /// <param name="baseInterFaceType">公共基础接口,标记为服务的那种</param>
        /// <returns></returns>
        public static string BuildIocCode(Type type, Type baseInterFaceType = null)
        {
            Func<Type, bool> findPublic = t => t.IsPublic;
            Func<Type, bool> findAssignable = t => t.IsAssignableFrom(baseInterFaceType);
            Func<Type, bool> findBySuffix = t => t.Name.EndsWith("Service");

            //查找
            string[] typeStrs = type.Assembly.GetExportedTypes()
                  .Where(findPublic)
                  .Where(baseInterFaceType == null ? findBySuffix : findAssignable)
                  .Select(t =>
                  {
                      return t.Name;
                  })
                  .Distinct()
                  .ToArray();

            Type[] aaa = type.Assembly.GetExportedTypes()
                  .Where(findPublic)
                  .ToArray();

            //构建
            string template = "services.AddScoped<{0}, {1}>();";
            StringBuilder stringBuilder = new StringBuilder();
            foreach (string item in typeStrs)
            {
                stringBuilder.AppendFormat(template, $"I{item}", item);
                stringBuilder.AppendLine();
            }

            //返回
            return stringBuilder.ToString();
        }